---
title: "Working with spatial data available through read.abares"
author: "Adam H. Sparks"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{read.abares}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
  %\VignetteDepends{pander}
  %\VignetteDepends{dplyr}
  %\VignetteDepends{sf}
  %\VignetteDepends{data.table}
---

```{r setup}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "vigfig-"
)
```

This vignette demonstrates some of the functionality of {read.abares} and how to work with some of the spatial and tabular data available through {read.abares}.
Please note that not all functions are demonstrated here, please refer to the [documentation reference](https://adamhsparks.github.io/read.abares/reference/) for a full list of functionality.
The worked examples here show some of the more advanced features that {read.abares} offers beyond just fetching and importing data, _e.g._, Australian Agricultural and Grazing Industries Survey (AAGIS) spatial shapefile which can be used with tabular data from the historical estimates, the Australian Gridded Farm Data, which can be downloaded, cached and then imported using one of four types of object or the soil thickness data, which includes rich metadata.

First we need to load the {read.abares} library.

```{r load_read.abares}
library(read.abares)
```

## Working with AAGIS Regions Spatial Data

### Obtaining the AAGIS Regions Spatial Data

ABARES offers spatial data for the Australian Agricultural and Grazing Industries Survey (AAGIS) regions that can be used for mapping tabular data from the estimates, _e.g._, `read_historical_regional_estimates()` or `read_state_estimates()`.

```{r aagis-regions}
aagis_regions <- read_aagis_regions(cache = TRUE)

plot(aagis_regions)
```

### Obtaining AAGIS Data by Region

{read.abares} offers functions to download the ABARES estimates based on the AAGIS results for national level, `read_historical_national_estimates()`, regional level `read_historical_regional_estimates()`, and state level `read_historical_state_estimates()` and also by performance category `read_estimates_by_performance_category()` and size category `read_estimates_by_size()`.
For this example, we will use the `read_historical_regional_estimates()` function to download the AAGIS data for the regions in the AAGIS regions shapefile and join the data and visualise some of the data.

```{r aagis-regions-data}
aagis_region_data <- read_historical_regional_estimates()
```

### Merging the AAGIS Regions Spatial Data with the AAGIS Regional Data

Using `read_aagis_regions()` and `read_historical_regional_estimates()`, we can merge the two datasets together to visualise the data.
To join the data, we will use the `left_join()` function from the {dplyr} package.

```{r aagis-regions-merge}
library(dplyr)

aagis_dat <- left_join(aagis_regions, aagis_region_data)
```

Once we've joined the data, we can visualise it using {ggplot2}.
Here we can plot the total area cropped (ha) and facet by year for all of Australia.

```{r aagis-regions-plot}
library(ggplot2)

total_area <- filter(aagis_dat, Variable == ("Total area cropped (ha)"))

ggplot(total_area) +
  geom_sf(aes(fill = Value)) +
  scale_fill_viridis_c() +
  labs(
    fill = "Total Area Cropped (ha)",
  ) +
  facet_wrap(~Year) +
  theme_minimal()
```

## Working With AGFD Data

You can download files and pipe directly into the class object that you desire for the Australian Farm Gridded Data (AGFD) data.

### Description of the Australian Farm Gridded Data

Directly from the DAFF website:

>The Australian Gridded Farm Data are a set of national scale maps containing simulated data on historical broadacre farm business outcomes including farm profitability on an 0.05-degree (approximately 5 km) grid.

>These data have been produced by read.abares as part of the ongoing Australian Agricultural Drought Indicator (AADI) project (previously known as the Drought Early Warning System Project) and were derived using read.abares farmpredict model, which in turn is based on read.abares Agricultural and Grazing Industries Survey (AAGIS) data.

>These maps provide estimates of farm business profit, revenue, costs and production by location (grid cell) and year for the period 1990-91 to 2022-23. The data do not include actual observed outcomes but rather model predicted outcomes for representative or â€˜typical' broadacre farm businesses at each location considering likely farm characteristics and prevailing weather conditions and commodity prices.

>The Australian Gridded Farm Data remain under active development, and as such should be considered experimental.

-- Australian Department of Agriculture, Fisheries and Forestry.


Load the {read.abares} library.

```{r agfd}
library(read.abares)
```

Check the file format information for the NetCDF files.

```{r agfd-file-format}
print_agfd_nc_file_format()
```

Download or load from the local cache and read the AGFD files as a list of {stars} objects.

```{r agfd-stars}
## A list of {stars} objects
star <- get_agfd(cache = TRUE) |>
  read_agfd_stars()

head(star[[1]])
```

Download or load from the local cache and read the AGFD files as a `terra::rast` object.

```{r agfd-terra}
## A {terra} `rast` object
terr <- get_agfd(cache = TRUE) |>
  read_agfd_terra()

head(terr[[1]])
```

Download or load from the local cache and read the AGFD files as a list of {tidync} objects.

```{r agfd-tidync}
## A list of {tidync} objects
tdnc <- get_agfd(cache = TRUE) |>
  read_agfd_tidync()

head(tdnc[[1]])
```

Download or load from the local cache and read the AGFD files as a {data.table} object.

```{r agfd-dt}
## A {data.table} object
get_agfd(cache = TRUE) |>
  read_agfd_dt() |>
  head()
```

## Working With the Soil Thickness Map

You can download the soil depth map and import it as a {stars} or [terra::rast()] object.

```{r soil-thickness}
library(read.abares)
get_topsoil_thickness(cache = TRUE) |>
  read_topsoil_thickness_stars()

x <- get_topsoil_thickness(cache = TRUE) |>
  read_topsoil_thickness_terra()
```

For your convenience, {read.abares} re-exports [terra::plot()], so you can just use `plot()` with the {terra} objects in {read.abares}.

```{r plot-topsoil-depth, fig.cap = "Soil Thickness for Australian areas of intensive agriculture of Layer 1 (A Horizon - top-soil) (derived from soil mapping)"}
plot(x)
```

### Soil Thickness Metadata

By default, a brief bit of metadata is printed to the console when you call the topsoil thickness object in your R session.

```{r brief-metadata}
library(read.abares)
get_topsoil_thickness(cache = TRUE)
```

But, {read.abares} provides a function for you to browse the topsoil thickness metadata in your console.

```{r soil-thickness-metadata}
library(read.abares)
get_topsoil_thickness(cache = TRUE) |>
  print_topsoil_thickness_metadata()
```

But you can also access it directly and use [pander::pander()] to include it in a document like this vignette.

<blockquote>
```{r soil-thickness-metadata-pander}
library(read.abares)
library(pander)
x <- get_topsoil_thickness(cache = TRUE)
y <- x$metadata
pander(y)
```
</blockquote>
